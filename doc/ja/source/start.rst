IoT サービスの設計、実装、使用に必要なもの
===============================================================

FogFlow では、サービスは、リンクされたデータ処理タスクのセットで構成されるサービス トポロジーによって表されます。したがって、データ処理ロジック全体を複数の小さなタスクに分解して、動的に作成し、クラウドまたはエッジに配置できるようにする方法を慎重に検討する必要があります。ここでは、設計および実装フェーズからサービス使用フェーズまでに実行する必要があることの概要を説明します。


設計段階
--------------

設計段階 (Design phase) は、トップダウンのアプローチを採用して、サービス ロジック全体を小さなタスクに分割する方法を検討できます。

#. サービスの主要なデータ処理部分を分析します。

        基本的に、データ処理部分全体をブラックボックスと見なし、入力データとは何か、生成される出力結果は何かを定義し始めます。

#. 主要なデータ処理部分を細かく分割します (データ処理タスク)

        データ駆動型のアプローチに従って、各出力について、必要な入力とデータ処理ロジックを確認できます。一方、主に2つの目的で、データ処理ロジックを小さなタスクに分割できるかどうかを確認できます。
        1）中間結果をさまざまなタスク間で共有して、さまざまな出力を生成できます。
        2）タスクを小さくして、エッジとクラウド間で動的に移行できるようにすることができます。
	

#. 入力と出力を使用してデータ処理フロー全体を確認します。

        サービス アプリケーションでデータ処理ロジックの個別のタスクを取得した後、主に、入力または出力データ ストリームタイプ、タスクの粒度など、各タスクを FogFlow タスク仕様で記述できるかどうかを確認することにより、FogFlow プログラミング モデルに基づいてそれらを指定する方法の検証を開始できます。

実装フェーズ
-----------------------

次の図に示すように、サービスを実装するには、次の手順が必要です。

.. figure:: ../../en/source/figures/concept.jpg
   :scale: 80 %
   :alt: map to buried treasure


#. Docker 化されたオペレーター (a dockerized operator) を実装します。

        定義されたサービス トポロジー内のタスク オブジェクトごとに、そのデータ処理ロジックは、1つまたは複数の Docker 化されたアプリケーション (dockerized applications) にマップされるオペレーターによって提供されます。
         オペレーターの名前は一意である必要があり、同じオペレーターを複数の Dokcer 化されたアプリケーションにマップできます。
        これは、異なるオペレーティング システム (Ubuntu、Windows、MacOSなど) および異なるハードウェア (x86 ベースまたは ARM ベース、64ビットまたは32ビットなど) に同じオペレーターの実装を提供します。
	
	Docker 化されたアプリケーションを実装する方法の詳細な手順はこちらです :ref:`operator-implementation`

#. Docker イメージを Docker レジストリーにプッシュします。
	
	オペレーター用の Docker イメージを作成したら、FogFlow によって構成および使用されるパブリックまたはプライベートの Docker レジストリーに Docker イメージをプッシュする必要があります。
	
	.. code-block:: bash
		
		# if you use the default public docker registry
		docker push task1
		
		# if you use your own private docker registry, which is using the domain name "myRegistry.com"
		docker tag  task1  myRegistry.com/task1
		docker push myRegistry.com/task1
		

#. 実装されたオペレーターを登録します。

        FogFlowでオペレーターを使用するには、オペレーターを登録する必要があります。これは、2つの異なる方法で実行できます。
	
        - FogFlow Task Designer を介して Docker 化されたオペレーター イメージを登録します
		
        - NGSI update を FogFlow Context Management システムに送信して、Docker 化されたオペレーター イメージを登録します。

        詳細については、こちらをご覧ください。 :ref:`operator-registration`. 
	
	
#. サービス トポロジーを定義して登録します。

        必要なすべてのオペレーターが FogFlow に登録されたら、サービス トポロジーの定義を開始できます。現在、FogFlow は、サービス トポロジーを定義および登録するための2つの方法を提供しています。
	
        - FogFlow Task Designer を介してサービス トポロジーを登録します。
		
        - NGSI update をFogFlow Context Management システムに送信して、サービス トポロジーを登録します。
	
	詳細については、こちらをご覧ください。 :ref:`topology-registration`. 


使用段階
-----------------------

定義されたサービス トポロジーが FogFlow に登録されると、処理要件を送信することでサービス トポロジーをトリガーできます。処理要件は、次のプロパティを持つ NGSI10 update として送信されます:

* topology: トリガーするトポロジー
* expected output: 外部サブスクライバーによって期待される出力ストリーム タイプ
* scope: 入力ストリームを選択する必要があるエリアの定義済みジオ スコープ
* scheduler: タスク割り当てのためにトポロジー マスターが選択する必要があるスケジューリング方法のタイプ


#. 要件オブジェクトを定義します。

#. 定義された要件をコンテキスト アップデートとして送信して、サービス トポロジーをトリガーします。

#. 生成された出力をクエリまたはサブスクライブします。


詳細については、こちらをご覧ください。 :ref:`trigger-topology`. 
