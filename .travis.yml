sudo: required

language: go

go:
    - 1.13.x

before install:
    - sudo docker run --rm -it -d -p 8082:8080 -p 9082:9080 -p 8000:8000 -v ~/dgraph:/dgraph fogflow/dgraph:latest
    - sudo docker run --rm -it -d --name mongodb -d mongo:3.4
    - sudo docker run --rm -it -d --name orion1 --link mongodb:mongodb -p 1026:1026 fiware/orion -dbhost mongodb
    - docker ps -a 

install: 
    - docker --version
    
    - echo "build discovery"
    - cd discovery
    - pwd
    - sh build

    - echo "build broker"
    - cd ../broker
    - pwd
    - sh build

    - echo "build worker"
    - cd ../worker
    - pwd
    - sh build

    - echo "build master"
    - cd ../master
    - pwd
    - sh build
    
    - echo "build designer"
    - cd ../master
    - pwd
    - sh build    

    - sudo apt-get update
    - sudo apt-get install jq
    - sudo apt-get install python-pip
    - pip -V
    - sudo pip install --upgrade pip
    - pip install Flask
    - pip install requests
    - pip install -U pytest
    - sudo apt-get install curl
    - curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
    - source ~/.profile   
    - nvm install 12.19.1   
    - node -v 
    - npm -v
    - echo 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list
    - wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -
    - sudo apt-get update
    - sudo apt-get install rabbitmq-server
    - sudo update-rc.d rabbitmq-server defaults
    - sudo service rabbitmq-server start
    - sudo systemctl enable rabbitmq-server
    - sudo systemctl start rabbitmq-server
    - sudo rabbitmqctl add_user admin mypass
    - sudo rabbitmqctl set_user_tags admin administrator
    - sudo rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
    - echo "Done"

before_script:
    - go get -u golang.org/x/lint/golint


script:
    - cd ../

    - cp docker/core/http/config.json  ./discovery/
    - cp docker/core/http/config.json  ./broker/
    - cp docker/core/http/config.json  ./master/
    - cp docker/core/http/config.json  ./worker/
    - cp docker/core/http/config.json  ./designer/

    - cd discovery/ 
    - jq '.coreservice_ip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - jq '.external_hostip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json    
    - go get; go build
    - screen -d -m ./discovery

    - cd ../broker/
    - jq '.coreservice_ip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - jq '.external_hostip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - go get; go build
    - screen -d -m ./broker

    - cd ../master/
    - jq '.coreservice_ip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - jq '.external_hostip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - go get; go build
    - screen -d -m ./master

    - cd ../designer/
    - jq '.coreservice_ip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - jq '.external_hostip = "127.0.0.1"' config.json > tmp.$$.json && mv tmp.$$.json config.json
    - npm install
    - screen -d -m node main.js

    - cd ../test/UnitTest/
    - screen -d -m python accumulator.py

    - cd ../UnitTest/v2/
    - pytest -s -v
 
    - cd ../v1/
    - pytest -s -v


    - cd ../persistance/
    - pytest -s -v 

    - echo "Testing Done !!!"

notifications:
    email: false
